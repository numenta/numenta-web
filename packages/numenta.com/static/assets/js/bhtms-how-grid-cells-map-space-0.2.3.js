/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/cell-viz/src/SdrDrawing.js":
/*!*************************************************!*\
  !*** ./node_modules/cell-viz/src/SdrDrawing.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/* From http://stackoverflow.com/questions/7128675/from-green-to-red-color-depend-on-percentage */\nfunction getGreenToRed(percent) {\n    let r, g;\n    percent = 100 - percent;\n    r = percent < 50 ? 255 : Math.floor(255 - (percent * 2 - 100) * 255 / 100);\n    g = percent > 50 ? 255 : Math.floor(percent * 2 * 255 / 100);\n    return rgbToHex(r, g, 0);\n}\n\n/* From http://stackoverflow.com/questions/5623838/rgb-to-hex-and-hex-to-rgb */\nfunction rgbToHex(r, g, b) {\n    return ((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1);\n}\n\nfunction datumIsOn(d) {\n    return d !== null && d > 0;\n}\n// function datumIsConnected(d, threshold) {\n//     return d !== null && threshold !== null && d > threshold\n// }\n\nlet defaultOpts = {\n    width: 400,\n    height: 400,\n    threshold: undefined,\n    gradientFill: false,\n    onColor: 'skyblue',\n    offColor: 'white',\n    connectionColor: 'royalblue',\n    lineColor: 'teal'\n};\n\nfunction SdrDrawing(permanences, element) {\n    this.permanences = permanences;\n    this.el = element;\n    this.$drawing = undefined;\n}\n\nSdrDrawing.prototype._snapDrawOptionsToBox = function (opts) {\n    let w = opts.width;\n    let h = opts.height;\n    let area = w * h;\n    let numBoxes = this.permanences.length;\n    let cellSize = Math.floor(Math.sqrt(area / numBoxes) * .95);\n    let repeatX = Math.floor(w / cellSize);\n    opts.cellSize = cellSize;\n    opts.rowLength = repeatX;\n    return opts;\n};\n\nSdrDrawing.prototype.onCell = function (eventName, fn) {\n    this.$drawing.selectAll('rect.bit').on(eventName, fn);\n    return this;\n};\n\nSdrDrawing.prototype.onConnection = function (eventName, fn) {\n    this.$drawing.selectAll('circle.connection').on(eventName, fn);\n    return this;\n};\n\nSdrDrawing.prototype.drawLinesTo = function (coords) {\n    let data = this.$drawing.selectAll('rect.bit').data();\n    let opts = this.drawOptions;\n\n    function renderLines(ls) {\n        ls.attr('class', 'line').attr('visibility', (d, i) => {\n            if (datumIsOn(d)) return 'visible';else return 'hidden';\n        }).attr('stroke', opts.lineColor).attr('stroke-width', 1.0).attr('x1', function (d, i) {\n            let offset = i % opts.rowLength;\n            return offset * opts.cellSize + opts.cellSize / 2;\n        }).attr('y1', function (d, i) {\n            let offset = Math.floor(i / opts.rowLength);\n            return offset * opts.cellSize + opts.cellSize / 2;\n        }).attr('x2', coords[0]).attr('y2', coords[1]);\n    }\n\n    // Update\n    let lines = this.$drawing.selectAll('line.line').data(data);\n    renderLines(lines);\n\n    // Enter\n    let newLines = lines.enter().append('line');\n    renderLines(newLines);\n\n    // Exit\n    lines.exit().remove();\n\n    return this;\n};\n\nSdrDrawing.prototype.draw = function (options) {\n    let perms = this.permanences;\n    let opts = this._snapDrawOptionsToBox(Object.assign({}, defaultOpts, options));\n    let threshold = opts.threshold;\n    this.$drawing = d3.select('#' + this.el).attr('width', opts.width).attr('height', opts.height);\n\n    function renderCell(r, c) {\n        r.attr('class', 'bit').attr('fill', d => {\n            if (d === null) return opts.offColor;\n            if (d > 0) {\n                if (opts.gradientFill) return '#' + getGreenToRed(d * 100);else return opts.onColor;\n            }\n            return opts.offColor;\n        }).attr('stroke', 'darkgrey').attr('stroke-width', 0.5).attr('fill-opacity', 1).attr('x', function (d, i) {\n            let offset = i % opts.rowLength;\n            return offset * opts.cellSize;\n        }).attr('y', function (d, i) {\n            let offset = Math.floor(i / opts.rowLength);\n            return offset * opts.cellSize;\n        }).attr('width', opts.cellSize).attr('height', opts.cellSize);\n\n        if (c) {\n            c.attr('class', 'connection').attr('fill', opts.connectionColor).attr('cx', function (d) {\n                let i = d.index;\n                let offset = i % opts.rowLength;\n                return offset * opts.cellSize + opts.cellSize / 2;\n            }).attr('cy', function (d) {\n                let i = d.index;\n                let offset = Math.floor(i / opts.rowLength);\n                return offset * opts.cellSize + opts.cellSize / 2;\n            }).attr('r', opts.cellSize / 4);\n        }\n    }\n\n    // Update\n    let rects = this.$drawing.selectAll('rect.bit').data(perms);\n    let circs;\n    // Only create circles if there is a threshold defined for connections.\n    if (threshold !== undefined) {\n        let permObjs = perms.map((p, i) => {\n            return {\n                index: i,\n                permanence: p\n            };\n        }).filter(p => {\n            return p.permanence !== null && p.permanence > threshold;\n        });\n        circs = this.$drawing.selectAll('circle.connection').data(permObjs);\n    }\n    renderCell(rects, circs);\n\n    // Enter\n    let newRects = rects.enter().append('rect');\n    let newCircs;\n    if (threshold !== undefined) {\n        newCircs = circs.enter().append('circle');\n    }\n    renderCell(newRects, newCircs);\n\n    // Exit\n    rects.exit().remove();\n    if (threshold !== undefined) {\n        circs.exit().remove();\n    }\n\n    // Stash the draw options we used\n    this.drawOptions = opts;\n\n    return this;\n};\n\nmodule.exports = SdrDrawing;\n\n//# sourceURL=webpack:///./node_modules/cell-viz/src/SdrDrawing.js?");

/***/ }),

/***/ "./node_modules/javascript-data-store/src/jsds.js":
/*!********************************************************!*\
  !*** ./node_modules/javascript-data-store/src/jsds.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/*\n * Copyright (c) 2010 Matthew A. Taylor\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\nvar REGEX_DOT_G = /\\./g,\n    BSLASH_DOT = '\\.',\n    REGEX_STAR_G = /\\*/g,\n    ID_LENGTH = 16,\n\n// static export\nJSDS,\n\n// private props\nrandoms = [],\n\n// private functions\nstoreIt,\n    update,\n    mergeArraysIntoSet,\n    arrayContains,\n    arrayRemoveItem,\n    fire,\n    listenerApplies,\n    removeListener,\n    getCompleteKey,\n    pullOutKeys,\n    toRegex,\n    valueMatchesKeyString,\n    clone,\n    getValue,\n    getRandomId,\n    generateRandomId;\n\n/*************************/\n/* The JSDataStore Class */\n/*************************/\n\nfunction JSDataStore(id) {\n    // data stores\n    this._s = {};\n    // event listeners\n    this._l = {};\n    this.id = id;\n}\n\nJSDataStore.prototype = {\n\n    /**\n     * Stores data\n     *\n     * key {String}: the key to be used to store the data. The same key can be used to retrieve\n     *               the data\n     * val {Object}: Any value to be stored in the store\n     * opts {Object} (optional): options to be used when storing data:\n     *                          'update': if true, values already existing within objects and\n     *                                    arrays will not be clobbered\n     * returns {Object}: The last value stored within specified key or undefined\n     *\n     * (fires 'store' event)\n     */\n    set: function (key, val, opts /*optional*/) {\n        var result;\n        opts = opts || { update: false };\n        fire.call(this, 'set', {\n            key: key,\n            value: val,\n            id: this.id,\n            when: 'before',\n            args: Array.prototype.slice.call(arguments, 0, arguments.length)\n        });\n        result = storeIt(this._s, key, opts, val);\n        fire.call(this, 'set', {\n            key: key,\n            value: val,\n            id: this.id,\n            when: 'after',\n            result: this.get(key, { quiet: true })\n        });\n        return result;\n    },\n\n    /**\n     * Gets data back out of store\n     *\n     * key {String}: the key of the data you want back\n     * returns {Object}: the data or undefined if key doesn't exist\n     *\n     * (fires 'get' event)\n     */\n    get: function (key) {\n        var s = this._s,\n            keys,\n            i = 0,\n            j = 0,\n            opts,\n            result,\n            splitKeys,\n            args = Array.prototype.slice.call(arguments, 0, arguments.length);\n\n        opts = args[args.length - 1];\n        if (typeof opts === 'string') {\n            opts = {};\n        } else {\n            args.pop();\n        }\n\n        if (!opts.quiet) {\n            fire.call(this, 'get', {\n                key: key,\n                when: 'before',\n                args: args\n            });\n        }\n\n        if (args.length === 1 && key.indexOf(BSLASH_DOT) < 0) {\n            result = s[key];\n        } else {\n            if (args.length > 1) {\n                keys = [];\n                for (i = 0; i < args.length; i++) {\n                    if (args[i].indexOf(BSLASH_DOT) > -1) {\n                        splitKeys = args[i].split(BSLASH_DOT);\n                        for (j = 0; j < splitKeys.length; j++) {\n                            keys.push(splitKeys[j]);\n                        }\n                    } else {\n                        keys.push(args[i]);\n                    }\n                }\n            } else if (key.indexOf(BSLASH_DOT) > -1) {\n                keys = key.split(BSLASH_DOT);\n            }\n\n            result = getValue(s, keys);\n        }\n\n        if (!opts.quiet) {\n            fire.call(this, 'get', {\n                key: key,\n                value: result,\n                when: 'after',\n                result: result\n            });\n        }\n        return result;\n    },\n\n    /**\n     * Adds a listener to this store. The listener will be executed when an event of\n     * the specified type is emitted and all the conditions defined in the parameters\n     * are met.\n     *\n     * type {String}: the type of event to listen for ('store', 'get', 'clear', etc.)\n     * options {object}: an object that contains one or more of the following configurations:\n     *                  'callback': the function to be executed\n     *                  'scope': the scope object for the callback execution\n     *                  'key': the storage key to listen for. If specified only stores into this key will\n     *                          cause callback to be executed\n     *                  'when': 'before' or 'after' (default is 'after')\n     */\n    on: function (type, opts) {\n        var me = this,\n            cbid = getRandomId(),\n            key = opts.key,\n            fn = opts.callback,\n            scope = opts.scope || this,\n            when = opts.when || 'after';\n        if (!this._l[type]) {\n            this._l[type] = [];\n        }\n        this._l[type].push({ id: cbid, callback: fn, scope: scope, key: key, when: when });\n        return {\n            id: cbid,\n            remove: function () {\n                removeListener(me._l[type], cbid);\n            }\n        };\n    },\n\n    before: function (type, key, cb, scpe) {\n        var callback = cb,\n            scope = scpe;\n        // key is optional\n        if (typeof key === 'function') {\n            callback = key;\n            scope = cb;\n            key = undefined;\n        }\n        return this.on(type, {\n            callback: callback,\n            key: key,\n            when: 'before',\n            scope: scope\n        });\n    },\n\n    after: function (type, key, cb, scpe) {\n        var callback = cb,\n            scope = scpe;\n        // key is optional\n        if (typeof key === 'function') {\n            callback = key;\n            scope = cb;\n            key = undefined;\n        }\n        function myCb() {\n            console.log(arguments);\n        }\n        return this.on(type, {\n            callback: callback,\n            key: key,\n            when: 'after',\n            scope: scope\n        });\n    },\n\n    /**\n     * Removes all data from store\n     *\n     * (fires 'clear' event)\n     */\n    clear: function () {\n        this._s = {};\n        fire.call(this, 'clear');\n    },\n\n    /**\n     * Removes all internal references to this data store. Note that to entirely release\n     * store object for garbage collection, you must also set any local references to the\n     * store to null!\n     *\n     * (fires 'remove' and 'clear' events)\n     */\n    remove: function () {\n        var ltype, optsArray, opts, i;\n        this.clear();\n        delete JSDS._stores[this.id];\n        arrayRemoveItem(randoms, this.id);\n        fire.call(this, 'remove');\n    }\n};\n\n/*************************/\n/* Global JSDS namespace */\n/*************************/\n\nJSDS = {\n\n    _stores: {},\n\n    /**\n     * Create a new data store object. If no id is specified, a random id will be\n     * generated.\n     *\n     * id {String} (optional): to identify this store for events and later retrieval\n     */\n    create: function (id) {\n\n        id = id || getRandomId();\n\n        if (this._stores[id]) {\n            throw new Error('Cannot overwrite existing data store \"' + id + '\"!');\n        }\n\n        this._stores[id] = new JSDataStore(id);\n\n        return this._stores[id];\n    },\n\n    /**\n     * Retrieves an existing data store object by id\n     *\n     * id {String}: the id of the store to retrieve\n     * returns {JSDataStore} the data store\n     */\n    get: function (id) {\n        return this._stores[id];\n    },\n\n    /**\n     * Removes all data stores objects. Specifically, each JSDataStore object's remove()\n     * method is called, and all local references to each are deleted.\n     */\n    clear: function () {\n        var storeId;\n        for (storeId in this._stores) {\n            if (this._stores.hasOwnProperty(storeId)) {\n                this._stores[storeId].remove();\n                delete this._stores[storeId];\n            }\n        }\n        this._stores = {};\n    },\n\n    /**\n     * Returns a count of the existing data stores in memory\n     */\n    count: function () {\n        var cnt = 0,\n            p;\n        for (p in this._stores) {\n            if (this._stores.hasOwnProperty(p)) {\n                cnt++;\n            }\n        }\n        return cnt;\n    },\n\n    /**\n     * Returns a list of ids [String] for all data store obects in memory\n     */\n    ids: function () {\n        var id,\n            ids = [];\n        for (id in this._stores) {\n            if (this._stores.hasOwnProperty(id)) {\n                ids.push(id);\n            }\n        }\n        return ids;\n    }\n};\n\n/*****************/\n/* PRIVATE STUFF */\n/*****************/\n\n// recursive store function\nstoreIt = function (store, key, opts, val, oldVal /*optional*/) {\n    var result, keys, oldKey;\n    if (key.indexOf(BSLASH_DOT) >= 0) {\n        keys = key.split('.');\n        oldVal = store[keys[0]] ? clone(store[keys[0]]) : undefined;\n        oldKey = keys.shift();\n        if (store[oldKey] === undefined) {\n            store[oldKey] = {};\n        }\n        return storeIt(store[oldKey], keys.join('.'), opts, val, oldVal);\n    }\n    result = oldVal ? oldVal[key] : store[key];\n    // if this is an update, and there is an old value to update\n    if (opts.update) {\n        update(store, val, key);\n    }\n    // if not an update, just overwrite the old value\n    else {\n            store[key] = val;\n        }\n    return result;\n};\n\n// recursive update function used to overwrite values within the store without\n// clobbering properties of objects\nupdate = function (store, val, key) {\n    var vprop;\n    if (typeof val !== 'object' || val instanceof Array) {\n        if (store[key] && val instanceof Array) {\n            mergeArraysIntoSet(store[key], val);\n        } else {\n            store[key] = val;\n        }\n    } else {\n        for (vprop in val) {\n            if (val.hasOwnProperty(vprop)) {\n                if (!store[key]) {\n                    store[key] = {};\n                }\n                if (store[key].hasOwnProperty(vprop)) {\n                    update(store[key], val[vprop], vprop);\n                } else {\n                    store[key][vprop] = val[vprop];\n                }\n            }\n        }\n    }\n};\n\n// merge two arrays without duplicate values\nmergeArraysIntoSet = function (lhs, rhs) {\n    var i = 0;\n    for (; i < rhs.length; i++) {\n        if (!arrayContains(lhs, rhs[i])) {\n            lhs.push(rhs[i]);\n        }\n    }\n};\n\n// internal utility function\narrayContains = function (arr, val, comparator /* optional */) {\n    var i = 0;\n    comparator = comparator || function (lhs, rhs) {\n        return lhs === rhs;\n    };\n    for (; i < arr.length; i++) {\n        if (comparator(arr[i], val)) {\n            return true;\n        }\n    }\n    return false;\n};\n\narrayRemoveItem = function (arr, item) {\n    var i, needle;\n    for (i = 0; i < arr.length; i++) {\n        if (arr[i] === item) {\n            needle = i;\n            break;\n        }\n    }\n    if (needle) {\n        arr.splice(needle, 1);\n    }\n};\n\n// fire an event of 'type' with included arguments to be passed to listeners functions\n// WARNING: this function must be invoked as fire.call(scope, type, args) because it uses 'this'.\n// The reason is so this function is not publicly exposed on JSDS instances\nfire = function (type, fireOptions) {\n    var i,\n        opts,\n        scope,\n        listeners,\n        pulledKeys,\n        listeners = this._l[type] || [];\n\n    fireOptions = fireOptions || {};\n\n    if (listeners.length) {\n        for (i = 0; i < listeners.length; i++) {\n            opts = listeners[i];\n            if (listenerApplies.call(this, opts, fireOptions)) {\n                scope = opts.scope || this;\n                if (opts.key && fireOptions) {\n                    if (opts.key.indexOf('*') >= 0) {\n                        pulledKeys = pullOutKeys(fireOptions.value);\n                        fireOptions.value = {};\n                        fireOptions.value.key = fireOptions.key + pulledKeys;\n                        fireOptions.value.value = getValue(this._s, fireOptions.value.key.split('.'));\n                    } else {\n                        fireOptions.value = getValue(this._s, opts.key.split('.'));\n                    }\n                }\n                if (fireOptions.args) {\n                    opts.callback.apply(scope, fireOptions.args);\n                } else if (fireOptions.result) {\n                    opts.callback.call(scope, fireOptions.result);\n                } else {\n                    opts.callback.call(scope, fireOptions.result);\n                }\n            }\n        }\n    }\n};\n\n// WARNING: this function must be invoked as listenerApplies.call(scope, listener, crit) because it uses 'this'.\n// The reason is so this function is not publicly exposed on JSDS instances\nlistenerApplies = function (listener, crit) {\n    var result = false,\n        last,\n        sub,\n        k,\n        replacedKey,\n        breakout = false;\n    if (listener.when && crit.when) {\n        if (listener.when !== crit.when) {\n            return false;\n        }\n    }\n    if (!listener.key || !crit) {\n        return true;\n    }\n    if (!crit.key || crit.key.match(toRegex(listener.key))) {\n        return true;\n    }\n    last = crit.key.length;\n    while (!breakout) {\n        sub = crit.key.substr(0, last);\n        last = sub.lastIndexOf(BSLASH_DOT);\n        if (last < 0) {\n            k = sub;\n            breakout = true;\n        } else {\n            k = sub.substr(0, last);\n        }\n        if (listener.key.indexOf('*') === 0) {\n            return valueMatchesKeyString(crit.value, listener.key.replace(/\\*/, crit.key).substr(crit.key.length + 1));\n        } else if (listener.key.indexOf('*') > 0) {\n            replacedKey = getCompleteKey(crit);\n            return toRegex(replacedKey).match(listener.key);\n        }\n        return valueMatchesKeyString(crit.value, listener.key.substr(crit.key.length + 1));\n    }\n    return result;\n};\n\nremoveListener = function (listeners, id) {\n    var i, l, needle;\n    for (i = 0; i < listeners.length; i++) {\n        l = listeners[i];\n        if (l.id && l.id === id) {\n            needle = i;\n            break;\n        }\n    }\n    if (typeof needle !== 'undefined') {\n        listeners.splice(needle, 1);\n    }\n};\n\ngetCompleteKey = function (o) {\n    var val = o.value,\n        key = o.key;\n    return key + pullOutKeys(val);\n};\n\npullOutKeys = function (v) {\n    var p,\n        res = '';\n    for (p in v) {\n        if (v.hasOwnProperty(p)) {\n            res += '.' + p;\n            if (typeof v[p] === 'object' && !(v[p] instanceof Array)) {\n                res += pullOutKeys(v[p]);\n            }\n        }\n    }\n    return res;\n};\n\ntoRegex = function (s) {\n    return s.replace(REGEX_DOT_G, '\\\\.').replace(REGEX_STAR_G, '\\.*');\n};\n\nvalueMatchesKeyString = function (val, key) {\n    var p,\n        i = 0,\n        keys = key.split('.');\n    for (p in val) {\n        if (val.hasOwnProperty(p)) {\n            if (keys[i] === '*' || p === keys[i]) {\n                if (typeof val[p] === 'object' && !(val[p] instanceof Array)) {\n                    return valueMatchesKeyString(val[p], keys.slice(i + 1).join('.'));\n                } else {\n                    return true;\n                }\n            }\n        }\n        i++;\n    }\n    return false;\n};\n\n// used to copy branches within the store. Object and array friendly\nclone = function (val) {\n    var newObj, i, prop;\n    if (val instanceof Array) {\n        newObj = [];\n        for (i = 0; i < val.length; i++) {\n            newObj[i] = clone(val[i]);\n        }\n    } else if (typeof val === 'object') {\n        newObj = {};\n        for (prop in val) {\n            if (val.hasOwnProperty(prop)) {\n                newObj[prop] = clone(val[prop]);\n            }\n        }\n    } else {\n        return val;\n    }\n    return newObj;\n};\n\n// returns a value from a store given an array of keys that is meant to describe depth\n// within the storage tree\ngetValue = function (store, keys) {\n    var key = keys.shift(),\n        endKey,\n        arrResult,\n        p,\n        keysClone;\n    if (key === '*') {\n        arrResult = [];\n        for (p in store) {\n            if (store.hasOwnProperty(p)) {\n                keysClone = clone(keys);\n                arrResult.push(getValue(store[p], keysClone));\n            }\n        }\n        return arrResult;\n    }\n    if (keys[0] && store[key] && (store[key][keys[0]] || keys[0] === '*')) {\n        return getValue(store[key], keys);\n    } else {\n        if (keys.length) {\n            endKey = keys[0];\n        } else {\n            endKey = key;\n        }\n        return store[endKey];\n    }\n};\n\ngenerateRandomId = function (length) {\n    var text = \"\",\n        i,\n        possible = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\";\n    for (i = 0; i < length; i++) {\n        text += possible.charAt(Math.floor(Math.random() * possible.length));\n    }\n    return text;\n};\n\ngetRandomId = function () {\n    var id = generateRandomId(ID_LENGTH);\n    // no duplicate ids allowed\n    while (arrayContains(randoms, id)) {\n        id = generateRandomId(ID_LENGTH);\n    }\n    randoms.push(id);\n    return id;\n};\n\nmodule.exports = JSDS;\n\n//# sourceURL=webpack:///./node_modules/javascript-data-store/src/jsds.js?");

/***/ }),

/***/ "./src/blogs/how-do-grid-cells-work/embed.js":
/*!***************************************************!*\
  !*** ./src/blogs/how-do-grid-cells-work/embed.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = () => {\n    let cuts = 20,\n        current = 0,\n        speed = 50;\n\n    function animateParamChange(jsds, target) {\n        let params = jsds.get('params');\n        let keys = Object.keys(target);\n        let scales = {};\n        keys.forEach(function (key) {\n            scales[key] = d3.scaleLinear().domain([0, cuts]).range([params[key], target[key]]);\n        });\n        setTimeout(function () {\n            keys.forEach(function (k) {\n                params[k] = parseInt(scales[k](current));\n            });\n            jsds.set('params', params);\n            current++;\n            if (current < cuts) {\n                animateParamChange(jsds, target);\n            }\n        }, speed);\n    }\n\n    BHTMS.header('header');\n\n    let jsdsFiringFields = BHTMS.JSDS.get('gridCellFiringFields');\n    BHTMS.gridCellFiringFields(\"gridCellFiringFields\");\n    window.showOnly = color => {\n        BHTMS.gridCellFiringFields.selectCellByColor(color);\n    };\n    window.toggleSim = function (on) {\n        jsdsFiringFields.set('walks', on);\n    };\n\n    BHTMS.oneGridCell(\"oneGridCell\");\n    let jsdsOneGridCell = BHTMS.JSDS.get('oneGridCell');\n    window.toggleOneGridCell = function (on) {\n        jsdsOneGridCell.set('walks', on);\n    };\n    window.resetOneGridCell = function () {\n        let targetParams = {\n            orientation: 15,\n            scale: 30\n        };\n        current = 0;\n        animateParamChange(jsdsOneGridCell, targetParams);\n    };\n\n    BHTMS.oneGridCellModule(\"oneGridCellModule\");\n    let jsdsOneGridCellModule = BHTMS.JSDS.get('oneGridCellModule');\n    window.toggleOneGridCellModule = function (on) {\n        jsdsOneGridCellModule.set('walks', on);\n    };\n\n    BHTMS.manyGridCellModules(\"manyGridCellModules\", 16);\n    let jsdsManyGridCellModules = BHTMS.JSDS.get('manyGridCellModules');\n    window.toggleManyGcm = function (on) {\n        jsdsManyGridCellModules.set('walks', on);\n    };\n    window.hideGcmLocationMarker = function (hide) {\n        jsdsManyGridCellModules.set('hide-marker', hide);\n    };\n    window.manyGcmSelect = function (num) {\n        let params = jsdsManyGridCellModules.get('params');\n        params.gcmCount = num;\n        jsdsManyGridCellModules.set('params', params);\n    };\n    window.manyGcmSetMarker = function (on) {\n        jsdsManyGridCellModules.set('hide-marker', !on);\n    };\n\n    BHTMS.gcmAsSdr(\"gcmAsSdr\");\n};\n\n//# sourceURL=webpack:///./src/blogs/how-do-grid-cells-work/embed.js?");

/***/ }),

/***/ "./src/blogs/how-do-grid-cells-work/firingFields.js":
/*!**********************************************************!*\
  !*** ./src/blogs/how-do-grid-cells-work/firingFields.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/*\n * Most of this code was taken from Mirko Klukas's repository at\n * https://github.com/mirkoklukas/grid-cell-visualization.\n *\n * I ported it from Canvas to SVG using D3JS. I added some more\n * visual stuff, but removed the beeping (sorry Mirko).\n */\n\nlet utils = __webpack_require__(/*! ../../widgets/utils */ \"./src/widgets/utils.js\");\nlet html = __webpack_require__(/*! ./firingFields.tmpl.html */ \"./src/blogs/how-do-grid-cells-work/firingFields.tmpl.html\");\nlet JSDS = __webpack_require__(/*! JSDS */ \"./node_modules/javascript-data-store/src/jsds.js\");\nlet FiringPatch = __webpack_require__(/*! ./firingPatch */ \"./src/blogs/how-do-grid-cells-work/firingPatch.js\");\n\nlet w = 800;\nlet h = 400;\n\nlet maxQueue = 200;\nlet dotSize = 1;\nlet fuzzSize = 60;\n\nlet jsds = JSDS.create('gridCellFiringFields');\n\nlet walkDistance = 10000;\nlet walkSpeed = 15.0;\nlet wasWalking = false;\njsds.set('walks', wasWalking);\nlet mouseover = false;\nlet frameRef = -1;\n\nlet $svg;\nlet newColors = ['red', 'blue', 'green'];\n\n/************** UTILS **********************/\nlet createFiringField = function (B, v, num_fields, r) {\n    let [w, h] = num_fields;\n    let firing_field = [];\n\n    w = parseInt(w / 2);\n    h = parseInt(h / 2);\n    for (let x = -w; x < w; x++) {\n        for (let y = -h; y < h; y++) {\n            let cx = x * B[0][0] + y * B[0][1] + v[0];\n            let cy = x * B[1][0] + y * B[1][1] + v[1];\n            let patch = new FiringPatch({\n                \"id\": [x, y],\n                \"center\": [cx, cy],\n                \"radius\": r });\n            firing_field.push(patch);\n        }\n    }\n    return firing_field;\n};\n\n/***** graphic treatments *******/\nfunction treatStops(points, key) {\n    points.attr('offset', d => d[0] + '%').attr('stop-color', newColors[key]).attr('stop-opacity', d => d[1] / 2);\n}\n\nfunction treatGradients(points, key, numPoints) {\n    points.attr('id', (d, i) => {\n        return 'gradient-' + key + '-' + i;\n    }).attr('cx', '50%').attr('cy', '50%').attr('r', (d, i) => {\n        return i / numPoints;\n    });\n\n    // Update stops\n    let $stops = points.selectAll('stop').data([[0, 1], [50, 0]]);\n    treatStops($stops, key);\n\n    // Enter stops\n    let $newStops = $stops.enter().append('stop');\n    treatStops($newStops, key);\n\n    // Exit stops\n    $stops.exit().remove();\n}\n\nfunction treatCircles(points, key, radius, useGradient = false) {\n    points.attr('cx', d => d.x).attr('cy', d => d.y).attr('r', radius);\n    if (useGradient) {\n        points.attr('fill', (d, i) => {\n            return 'url(\"#gradient-' + key + '-' + i + '\")';\n        });\n    } else {\n        points.attr('fill', newColors[key]);\n    }\n}\n\nfunction prepSvg($svg) {\n    let keys = [\"0\", \"1\", \"2\"];\n\n    $svg.attr('width', w).attr('height', h);\n\n    let $gcGroups = $svg.selectAll('g.grid-cell').data(keys).enter().append('g').attr('id', key => 'group-' + key).attr('class', 'grid-cell');\n\n    $gcGroups.append('g').attr('class', 'dots');\n    $gcGroups.append('g').attr('class', 'fuzz').append('defs');\n    // Add the current location circle over top of everything else\n    $svg.append('circle').attr('id', 'current-location');\n}\n\nfunction setVisible(gcId, visible) {\n    let visibility = 'hidden';\n    if (visible) visibility = 'visible';\n    d3.select('#group-' + gcId).attr('visibility', visibility);\n    // Toggle the checkbox\n    $('#grid-cell-' + gcId).prop('checked', visible);\n}\n\nlet moduleOut = elId => {\n\n    utils.loadHtml(html.default, elId, () => {\n\n        let $walksCheckbox = $('#' + elId + ' input.walks');\n\n        let t = undefined;\n        let grid_cells = [];\n        let mx;\n        let my;\n\n        let [X, V] = utils.randomTorusWalk(walkDistance, w, h, walkSpeed);\n\n        let theta = 1.43;\n        let c = 180;\n        grid_cells.push(createFiringField([[c * Math.cos(theta), c * Math.cos(theta + Math.PI / 3.0)], [c * Math.sin(theta), c * Math.sin(theta + Math.PI / 3.0)]], [0, 0], [20, 20], 400));\n\n        theta = 1.1;\n        c = 190;\n        grid_cells.push(createFiringField([[c * Math.cos(theta), c * Math.cos(theta + Math.PI / 3.0)], [c * Math.sin(theta), c * Math.sin(theta + Math.PI / 3.0)]], [10, 0], [20, 20], 400));\n\n        theta = 2.0;\n        c = 200;\n        grid_cells.push(createFiringField([[c * Math.cos(theta), c * Math.cos(theta + Math.PI / 3.0)], [c * Math.sin(theta), c * Math.sin(theta + Math.PI / 3.0)]], [10, 0], [20, 20], 400));\n\n        jsds.set('gridCells', grid_cells);\n\n        function updateLocation(x, y) {\n            let loc = { x: x, y: y };\n            for (let gcId = 0; gcId < grid_cells.length; gcId++) {\n                let gc_id = gcId.toString();\n                let gcStore = jsds.get('spikes.' + gc_id) || [];\n                for (let f of grid_cells[gcId]) {\n                    if (f.spike([x, y])) {\n                        gcStore.push(loc);\n                        if (gcStore.length > maxQueue) gcStore.shift();\n                    }\n                }\n                if (gcStore.length) {\n                    let key = 'spikes.' + gc_id.toString();\n                    jsds.set(key, gcStore);\n                }\n            }\n            t += 1;\n            jsds.set('currentLocation', loc);\n        }\n\n        function updateDisplay() {\n            let $el = $svg,\n                data = jsds.get('spikes') || [],\n                currentLocation = jsds.get('currentLocation') || { x: 0, y: 0, type: 'world' };\n            let keys = Object.keys(data);\n            for (let key of keys) {\n                let $dotGroup = $el.select('g#group-' + key + ' g.dots');\n                let $fuzzGroup = $el.select('g#group-' + key + ' g.fuzz');\n\n                // First let's deal with the gradients\n                let numPoints = data[key].length;\n\n                // Update\n                let $gradients = $fuzzGroup.select('defs').selectAll('radialGradient').data(data[key]);\n                treatGradients($gradients, key, numPoints);\n\n                // Enter\n                let $newGradients = $gradients.enter().append('radialGradient');\n                treatGradients($newGradients, key, numPoints);\n\n                // Exit\n                $gradients.exit().remove();\n\n                // Now deal with circles, using radial gradients for fuzzy circles\n\n                // Update\n                let $dots = $dotGroup.selectAll('circle').data(data[key]);\n                treatCircles($dots, key, dotSize);\n                let $fuzz = $fuzzGroup.selectAll('circle').data(data[key]);\n                treatCircles($fuzz, key, fuzzSize, true);\n\n                // Enter\n                let $newDots = $dots.enter().append('circle');\n                treatCircles($newDots, key, 1);\n                let $newFuzz = $fuzz.enter().append('circle');\n                treatCircles($newFuzz, key, 10);\n                // Exit\n                $dots.exit().remove();\n                $fuzz.exit().remove();\n            }\n\n            $el.select('#current-location').attr('cx', currentLocation.x).attr('cy', currentLocation.y).attr('r', 6).attr('stroke', 'black').attr('stroke-width', '3px').attr('fill', 'none');\n        }\n\n        function start() {\n            if (!mouseover) {\n                frameRef = window.requestAnimationFrame(step);\n            }\n        }\n\n        function stop() {\n            window.cancelAnimationFrame(frameRef);\n        }\n\n        function step() {\n            if (isNaN(t) || t === undefined) {\n                t = 0;\n                mx = X[t][0];\n                my = X[t][1];\n            }\n            mx = X[t % walkDistance][0];\n            my = X[t % walkDistance][1];\n            updateLocation(mx, my);\n            if (jsds.get('walks')) {\n                start();\n            }\n        }\n\n        $('.cell-selection input').change(evt => {\n            let elid = evt.target.id;\n            let gcid = elid.split('-').pop();\n            let isOn = document.getElementById(elid).checked;\n            setVisible(gcid, isOn);\n        });\n\n        $walksCheckbox.change(evt => {\n            let walks = document.getElementById(evt.target.id).checked;\n            jsds.set('walks', walks);\n        });\n\n        $svg = d3.select('#' + elId + ' svg');\n\n        let interactEnter = () => {\n            d3.event.preventDefault();\n            mouseover = true;\n            if (jsds.get('walks')) stop();\n        };\n        let interactMove = () => {\n            d3.event.preventDefault();\n            let mouse = d3.mouse($svg.node());\n            updateLocation(mouse[0], mouse[1]);\n        };\n        let interactLeave = () => {\n            d3.event.preventDefault();\n            mouseover = false;\n            if (jsds.get('walks')) start();\n        };\n\n        $svg.on('mouseenter', interactEnter);\n        $svg.on('mousemove', interactMove);\n        $svg.on('mouseleave', interactLeave);\n        $svg.on('touchstart', interactEnter);\n        $svg.on('touchmove', interactMove);\n        $svg.on('touchend', interactLeave);\n\n        prepSvg($svg);\n\n        jsds.after('set', 'spikes', updateDisplay);\n        jsds.before('set', 'walks', () => {\n            // stash previous value\n            wasWalking = jsds.get('walks');\n        });\n        jsds.after('set', 'walks', walks => {\n            $walksCheckbox.prop('checked', walks);\n            if (walks && !wasWalking) {\n                start();\n            } else if (!walks && wasWalking) {\n                stop();\n            }\n        });\n    });\n};\n\n// A hack to shove in more functionality without opening up the API.\nmoduleOut.selectCellByColor = clr => {\n    if (clr) {\n        newColors.forEach((color, gcId) => {\n            setVisible(gcId, color === clr);\n        });\n    } else {\n        newColors.forEach((color, gcId) => {\n            setVisible(gcId, true);\n        });\n    }\n};\n\nmodule.exports = moduleOut;\n\n//# sourceURL=webpack:///./src/blogs/how-do-grid-cells-work/firingFields.js?");

/***/ }),

/***/ "./src/blogs/how-do-grid-cells-work/firingFields.tmpl.html":
/*!*****************************************************************!*\
  !*** ./src/blogs/how-do-grid-cells-work/firingFields.tmpl.html ***!
  \*****************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony default export */ __webpack_exports__[\"default\"] = (`<svg style=\"border:solid black 1px\">\n    <defs></defs>\n</svg>\n<br>\n<div class=\"cell-selection\">\n    Show firing fields for:&nbsp;&nbsp;\n    <input id=\"grid-cell-0\" type=\"checkbox\" checked=\"checked\"><label for=\"grid-cell-0\">Red Cell</label>&nbsp;&nbsp;\n    <input id=\"grid-cell-1\" type=\"checkbox\" checked=\"checked\"><label for=\"grid-cell-1\">Blue Cell</label>&nbsp;&nbsp;\n    <input id=\"grid-cell-2\" type=\"checkbox\" checked=\"checked\"><label for=\"grid-cell-2\">Green Cell</label>\n</div>\n<input id=\"walks1\" class=\"walks\" type=\"checkbox\"><label for=\"walks1\">Random Walk</label>\n`);\n\n//# sourceURL=webpack:///./src/blogs/how-do-grid-cells-work/firingFields.tmpl.html?");

/***/ }),

/***/ "./src/blogs/how-do-grid-cells-work/firingPatch.js":
/*!*********************************************************!*\
  !*** ./src/blogs/how-do-grid-cells-work/firingPatch.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("let dist = function (a, b) {\n    return Math.sqrt((a[0] - b[0]) ** 2 + (a[1] - b[1]) ** 2);\n};\n\nclass FiringPatch {\n\n    constructor(params) {\n        this.id = params.id;\n        this.center = params.center;\n        this.radius = params.radius;\n    }\n\n    prob(p) {\n        let c = this.center;\n        let r = this.radius;\n        let d = dist(p, c);\n        let out = 0;\n        if (d < r) {\n            out = Math.exp(-(d ^ 2) / 10.);\n        }\n        return out;\n    }\n\n    spike(p) {\n        return Math.random() < this.prob(p);\n    }\n\n    getId() {\n        return this.id.toString();\n    }\n}\n\nmodule.exports = FiringPatch;\n\n//# sourceURL=webpack:///./src/blogs/how-do-grid-cells-work/firingPatch.js?");

/***/ }),

/***/ "./src/blogs/how-do-grid-cells-work/gcmAsSdr.js":
/*!******************************************************!*\
  !*** ./src/blogs/how-do-grid-cells-work/gcmAsSdr.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("let utils = __webpack_require__(/*! ../../widgets/utils */ \"./src/widgets/utils.js\");\nlet SdrDrawing = __webpack_require__(/*! SdrDrawing */ \"./node_modules/cell-viz/src/SdrDrawing.js\");\nlet html = __webpack_require__(/*! ./gcmAsSdr.tmpl.html */ \"./src/blogs/how-do-grid-cells-work/gcmAsSdr.tmpl.html\");\nlet HexagonGridCellModule = __webpack_require__(/*! HexagonGridCellModule */ \"./src/gridCells/hex-gcm.js\");\nlet JSDS = __webpack_require__(/*! JSDS */ \"./node_modules/javascript-data-store/src/jsds.js\");\n\nlet jsds = JSDS.create('gcmAsSdr');\n\nlet startingParams = {\n    anchor: { x: 0, y: 0 }\n};\n\nlet walkDistance = 10000;\nlet walkSpeed = 2.0;\nlet walkFunction;\nlet wasWalking = false;\njsds.set('walks', wasWalking);\nlet mouseover = false;\nlet frameRef = -1;\n\nlet colors = {\n    fields: {\n        on: {\n            fill: 'CORNFLOWERBLUE'\n        },\n        dim: {\n            fill: '#CBF1F1'\n        },\n        stroke: 'none',\n        fill: 'none'\n    }\n};\n\nlet gridCellModules;\nlet gridRows = 4,\n    gridCols = 4;\n\nfunction buildGridCellModules(gcmCount) {\n    let out = [];\n    while (out.length < gcmCount) {\n        let orientation = parseInt(utils.getRandomArbitrary(0, 60));\n        let scale = parseInt(utils.getRandomArbitrary(10, 50));\n        let module = new HexagonGridCellModule(0, gridRows, gridCols, orientation, scale);\n        module.setColor(Math.round(utils.getRandomArbitrary(100, 255)), Math.round(utils.getRandomArbitrary(100, 255)), Math.round(utils.getRandomArbitrary(100, 255)));\n        module.activeCells = utils.getRandomArbitrary(1, 2);\n        out.push(module);\n    }\n    return out;\n}\n\nlet moduleOut = (elId, gcmCount = 16) => {\n    utils.loadHtml(html.default, elId, () => {\n\n        let $walksCheckbox = $('#' + elId + ' input.walks');\n\n        let width = 218;\n        let height = 218;\n        let t = 0;\n        let [X, V] = utils.randomTorusWalk(walkDistance, width, height, walkSpeed);\n        walkFunction = X;\n\n        // I'm just stashing there here because it is convenient, not because it\n        // is the right thing to do.\n        startingParams.gcmCount = gcmCount;\n\n        gridCellModules = buildGridCellModules(gcmCount);\n\n        let $spaceSvg = d3.select('#' + elId + ' svg.space').attr('width', width).attr('height', height);\n        let $world = $spaceSvg.select('g.world');\n        let $sdrSvg = d3.select('#' + elId + ' svg.sdr').attr('width', width).attr('height', height);\n\n        let $el = $('#' + elId);\n        let $gcmCountSlider = $el.find('input.gcmCount'),\n            $gcmCountDisplay = $('span.gcmCount'),\n            $cellCountDisplay = $('span.cellCount');\n\n        function treatFields(fields, gcmIndex, params) {\n            fields.attr('class', 'field').attr('cx', d => d.x).attr('cy', d => d.y).attr('r', params.scale / 4).attr('stroke', colors.fields.stroke).attr('fill', d => {\n                let fill = colors.fields.fill;\n                let gridCellIndex = d.gridCell.id;\n                if (d.gridCell.active) fill = gridCellModules[gcmIndex].getColorString();\n                return fill;\n            });\n        }\n\n        function updateFields($group, points, gcmIndex, params) {\n            // Update\n            let $fields = $group.selectAll('circle.field').data(points);\n            treatFields($fields, gcmIndex, params);\n\n            // Enter\n            let $newFields = $fields.enter().append('circle');\n            treatFields($newFields, gcmIndex, params);\n\n            // Exit\n            $fields.exit().remove();\n        }\n\n        function updateLocation($group, location) {\n            let w = 12;\n            $group.select('rect.location').attr('x', location.x - w / 2).attr('y', location.y - w / 2).attr('width', w).attr('height', w).attr('rx', w / 4).attr('ry', w / 4).attr('fill', 'white').attr('stroke', 'black').attr('stroke-width', '3px');\n        }\n\n        function updateWorld($world, location, params) {\n            let data = d3.range(0, params.gcmCount);\n\n            function treatGroups(groups) {\n                groups.attr('class', (d, i) => {\n                    return 'gcm gcm-' + i;\n                });\n            }\n\n            // Update\n            let $gcmWorldGroups = $world.selectAll('g.gcm').data(data);\n            treatGroups($gcmWorldGroups);\n\n            // Enter\n            let $newGroups = $gcmWorldGroups.enter().append('g');\n            treatGroups($newGroups);\n\n            // Exit\n            $gcmWorldGroups.exit().remove();\n\n            $gcmWorldGroups.each((value, index) => {\n                let $group = $spaceSvg.select('.gcm-' + index);\n                let module = gridCellModules[index];\n                let origin = { x: 0, y: 0 };\n                let worldPoints = module.createWorldPoints(origin, width, height);\n                if (location.type === 'world') module.intersectWorld(location.x, location.y, worldPoints);\n                let myParams = Object.assign({\n                    scale: module.scale\n                }, params);\n                updateFields($group, worldPoints, index, myParams);\n            });\n        }\n\n        function updateSdr($sdr, gridCellModules) {\n            let sdr = [];\n            gridCellModules.forEach(m => {\n                m.gridCells.forEach(c => {\n                    if (c.active) sdr.push(1);\n                    sdr.push(0);\n                });\n            });\n            let drawing = new SdrDrawing(sdr, 'gcm-sdr');\n            drawing.draw({\n                width: width,\n                height: height\n            });\n        }\n\n        function updateDisplay() {\n            let params = jsds.get('params');\n            let location = jsds.get('location');\n            // Bail out if params or location haven't been loaded yet.\n            if (!params || !location) return;\n\n            let $world = $spaceSvg.selectAll('g.world').data([null]);\n            $world.enter().append('g').attr('class', 'world');\n\n            updateWorld($world, location, params);\n            updateSdr($sdrSvg, gridCellModules);\n\n            updateLocation($spaceSvg, location);\n            // update display sliders\n            $gcmCountSlider.val(params.gcmCount);\n            $gcmCountDisplay.html(params.gcmCount);\n            $cellCountDisplay.html(params.gcmCount * gridRows * gridCols);\n        }\n\n        function updateParams() {\n            gridCellModules = buildGridCellModules(jsds.get('params').gcmCount);\n            updateDisplay();\n        }\n\n        // Random walk animation controls\n        function start() {\n            if (!mouseover) {\n                frameRef = window.requestAnimationFrame(step);\n            }\n        }\n\n        function stop() {\n            window.cancelAnimationFrame(frameRef);\n        }\n\n        function step() {\n            if (isNaN(t) || t === undefined) {\n                t = 0;\n            }\n            let x = X[t % walkDistance][0];\n            let y = X[t % walkDistance][1];\n            jsds.set('location', {\n                type: 'world',\n                x: x, y: y\n            });\n            t++;\n            if (jsds.get('walks')) {\n                start();\n            }\n        }\n\n        // Animation events\n        $walksCheckbox.change(evt => {\n            let walks = document.getElementById(evt.target.id).checked;\n            jsds.set('walks', walks);\n        });\n\n        let interactEnter = () => {\n            d3.event.preventDefault();\n            mouseover = true;\n            if (jsds.get('walks')) stop();\n        };\n        let interactMove = () => {\n            d3.event.preventDefault();\n            let worldMouse = d3.mouse($world.node());\n            let location = {\n                type: 'world',\n                x: worldMouse[0],\n                y: worldMouse[1]\n            };\n            jsds.set('location', location);\n        };\n        let interactLeave = () => {\n            d3.event.preventDefault();\n            mouseover = false;\n            if (jsds.get('walks')) start();\n        };\n\n        $spaceSvg.on('mouseenter', interactEnter);\n        $spaceSvg.on('mousemove', interactMove);\n        $spaceSvg.on('mouseleave', interactLeave);\n        $spaceSvg.on('touchstart', interactEnter);\n        $spaceSvg.on('touchmove', interactMove);\n        $spaceSvg.on('touchend', interactLeave);\n\n        // Start here\n\n        // User slider events\n        $gcmCountSlider.on('input', () => {\n            let params = jsds.get('params');\n            params.gcmCount = parseInt($gcmCountSlider.val());\n            jsds.set('params', params);\n        });\n\n        jsds.before('set', 'walks', () => {\n            // stash previous value\n            wasWalking = jsds.get('walks');\n        });\n        jsds.after('set', 'walks', walks => {\n            $walksCheckbox.prop('checked', walks);\n            if (walks && !wasWalking) {\n                start();\n            } else if (!walks && wasWalking) {\n                stop();\n            }\n        });\n        jsds.after('set', 'hide-marker', hide => {\n            let visible = 'visible';\n            if (hide) visible = 'hidden';\n            $spaceSvg.select('rect.location').attr('visibility', visible);\n        });\n\n        // Update when values change.\n        jsds.after('set', 'params', updateParams);\n        jsds.after('set', 'location', updateDisplay);\n\n        jsds.set('params', startingParams);\n\n        start();\n    });\n};\n\nmodule.exports = moduleOut;\n\n//# sourceURL=webpack:///./src/blogs/how-do-grid-cells-work/gcmAsSdr.js?");

/***/ }),

/***/ "./src/blogs/how-do-grid-cells-work/gcmAsSdr.tmpl.html":
/*!*************************************************************!*\
  !*** ./src/blogs/how-do-grid-cells-work/gcmAsSdr.tmpl.html ***!
  \*************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony default export */ __webpack_exports__[\"default\"] = (`<svg class=\"space\" style=\"border:solid black 1px;margin-right:4px\">\n    <g class=\"world\"></g>\n    <rect class=\"location\"></rect>\n</svg>\n<svg class=\"sdr\" id=\"gcm-sdr\" style=\"border:solid black 0px\"></svg>\n<br>\n<input id=\"walks5\" class=\"walks\" type=\"checkbox\"><label for=\"walks5\">Random Walk</label>\n<input type=\"range\" min=\"1\" max=\"32\" value=\"5\" step=\"1\" class=\"gcmCount\">\n<span class=\"gcmCount\">?</span> Grid Cell Modules\n<br>\n`);\n\n//# sourceURL=webpack:///./src/blogs/how-do-grid-cells-work/gcmAsSdr.tmpl.html?");

/***/ }),

/***/ "./src/blogs/how-do-grid-cells-work/header.js":
/*!****************************************************!*\
  !*** ./src/blogs/how-do-grid-cells-work/header.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("let utils = __webpack_require__(/*! ../../widgets/utils */ \"./src/widgets/utils.js\");\nlet html = __webpack_require__(/*! ./header.tmpl.html */ \"./src/blogs/how-do-grid-cells-work/header.tmpl.html\");\nlet HexagonGridCellModule = __webpack_require__(/*! HexagonGridCellModule */ \"./src/gridCells/hex-gcm.js\");\nlet JSDS = __webpack_require__(/*! JSDS */ \"./node_modules/javascript-data-store/src/jsds.js\");\n\nlet jsds = JSDS.create('header');\n\nlet startingParams = {\n    anchor: { x: 0, y: 0 }\n};\n\nlet walkDistance = 10000;\nlet walkSpeed = 2.0;\nlet walkFunction;\nlet wasWalking = true;\njsds.set('walks', wasWalking);\nlet frameRef = -1;\n\nlet gridCellModules;\nlet gridRows = 4,\n    gridCols = 4;\n\nfunction buildGridCellModules(gcmCount) {\n    let out = [];\n    while (out.length < gcmCount) {\n        let orientation = parseInt(utils.getRandomArbitrary(0, 60));\n        let scale = parseInt(utils.getRandomArbitrary(10, 50));\n        let module = new HexagonGridCellModule(0, gridRows, gridCols, orientation, scale);\n        module.setColor(utils.getRandomArbitrary(100, 255), utils.getRandomArbitrary(100, 255), utils.getRandomArbitrary(100, 255));\n        module.activeCells = 1;\n        out.push(module);\n    }\n    return out;\n}\n\nlet moduleOut = (elId, gcmCount = 16) => {\n    utils.loadHtml(html.default, elId, () => {\n\n        let $walksCheckbox = $('#' + elId + ' input.walks');\n\n        let width = 443;\n        let height = 60;\n        let t = 0;\n        let [X, V] = utils.randomTorusWalk(walkDistance, width, height, walkSpeed);\n        walkFunction = X;\n\n        // I'm just stashing there here because it is convenient, not because it\n        // is the right thing to do.\n        startingParams.gcmCount = gcmCount;\n\n        gridCellModules = buildGridCellModules(gcmCount);\n\n        let $svg = d3.select('#' + elId + ' svg.main').attr('width', width).attr('height', height);\n        let $world = $svg.select('g.world');\n\n        function treatFields(fields, gcmIndex, params) {\n            fields.attr('class', 'field').attr('cx', d => d.x).attr('cy', d => d.y).attr('r', params.scale / 4).attr('stroke', 'none').attr('fill', d => {\n                let fill = 'none';\n                let gridCellIndex = d.gridCell.id;\n                if (d.gridCell.active) fill = gridCellModules[gcmIndex].getColorString();\n                return fill;\n            });\n        }\n\n        function updateFields($group, points, gcmIndex, params) {\n            // Update\n            let $fields = $group.selectAll('circle.field').data(points);\n            treatFields($fields, gcmIndex, params);\n\n            // Enter\n            let $newFields = $fields.enter().append('circle');\n            treatFields($newFields, gcmIndex, params);\n\n            // Exit\n            $fields.exit().remove();\n        }\n\n        function updateWorld($world, location, params) {\n            let data = d3.range(0, params.gcmCount);\n\n            function treatGroups(groups) {\n                groups.attr('class', (d, i) => {\n                    return 'gcm gcm-' + i;\n                });\n            }\n\n            // Update\n            let $gcmWorldGroups = $world.selectAll('g.gcm').data(data);\n            treatGroups($gcmWorldGroups);\n\n            // Enter\n            let $newGroups = $gcmWorldGroups.enter().append('g');\n            treatGroups($newGroups);\n\n            // Exit\n            $gcmWorldGroups.exit().remove();\n\n            $gcmWorldGroups.each((value, index) => {\n                let $group = $svg.select('.gcm-' + index);\n                let module = gridCellModules[index];\n                let origin = { x: 0, y: 0 };\n                let worldPoints = module.createWorldPoints(origin, width, height);\n                if (location.type === 'world') module.intersectWorld(location.x, location.y, worldPoints);\n                let myParams = Object.assign({\n                    scale: module.scale\n                }, params);\n                updateFields($group, worldPoints, index, myParams);\n            });\n        }\n\n        function updateDisplay() {\n            let params = jsds.get('params');\n            let location = jsds.get('location');\n            // Bail out if params or location haven't been loaded yet.\n            if (!params || !location) return;\n\n            let $world = $svg.selectAll('g.world').data([null]);\n            let $overlay = $svg.selectAll('g.overlay').data([null]);\n            $world.enter().append('g').attr('class', 'world');\n            $overlay.enter().append('g').attr('class', 'overlay');\n\n            updateWorld($world, location, params);\n            // updateOverlay($overlay, location, params)\n        }\n\n        function updateParams() {\n            gridCellModules = buildGridCellModules(jsds.get('params').gcmCount);\n            updateDisplay();\n        }\n\n        // On user mouse move over world.\n        $svg.on('mousemove', () => {\n            d3.event.preventDefault();\n            let worldMouse = d3.mouse($world.node());\n            let location = {\n                type: 'world',\n                x: worldMouse[0],\n                y: worldMouse[1]\n            };\n            jsds.set('location', location);\n        });\n\n        jsds.before('set', 'walks', () => {\n            // stash previous value\n            wasWalking = jsds.get('walks');\n        });\n        jsds.after('set', 'walks', walks => {\n            $walksCheckbox.prop('checked', walks);\n            if (walks && !wasWalking) {\n                start();\n            } else if (!walks && wasWalking) {\n                stop();\n            }\n        });\n        jsds.after('set', 'hide-marker', hide => {\n            let visible = 'visible';\n            if (hide) visible = 'hidden';\n            $svg.select('rect.location').attr('visibility', visible);\n        });\n\n        // Update when values change.\n        jsds.after('set', 'params', updateParams);\n        jsds.after('set', 'location', updateDisplay);\n\n        jsds.set('params', startingParams);\n\n        function setRandomLocation() {\n            jsds.set('location', {\n                x: utils.getRandomArbitrary(0, 300),\n                y: 30,\n                type: 'world'\n            });\n        }\n\n        setRandomLocation();\n        let initialLoop = setInterval(setRandomLocation, 1000);\n        setTimeout(() => {\n            clearInterval(initialLoop);\n        }, 10000);\n    });\n};\n\nmodule.exports = moduleOut;\n\n//# sourceURL=webpack:///./src/blogs/how-do-grid-cells-work/header.js?");

/***/ }),

/***/ "./src/blogs/how-do-grid-cells-work/header.tmpl.html":
/*!***********************************************************!*\
  !*** ./src/blogs/how-do-grid-cells-work/header.tmpl.html ***!
  \***********************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony default export */ __webpack_exports__[\"default\"] = (`<svg class=\"main\" style=\"border:solid black 1px\">\n    <g class=\"world\">\n    </g>\n    <text x=\"15\" y=\"40\" font-size=\"24pt\" font-family=\"sans-serif\" font-weight=\"bolder\">\n        How Grid Cells Map Space\n    </text>\n    <text x=\"2\" y=\"58\" font-size=\"6pt\">\n        hover\n    </text>\n</svg>\n`);\n\n//# sourceURL=webpack:///./src/blogs/how-do-grid-cells-work/header.tmpl.html?");

/***/ }),

/***/ "./src/blogs/how-do-grid-cells-work/index.js":
/*!***************************************************!*\
  !*** ./src/blogs/how-do-grid-cells-work/index.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("let embed = __webpack_require__(/*! ./embed */ \"./src/blogs/how-do-grid-cells-work/embed.js\");\n\nwindow.BHTMS = {\n    header: __webpack_require__(/*! ./header */ \"./src/blogs/how-do-grid-cells-work/header.js\"),\n    gridCellFiringFields: __webpack_require__(/*! ./firingFields */ \"./src/blogs/how-do-grid-cells-work/firingFields.js\"),\n    oneGridCell: __webpack_require__(/*! ./oneGridCell */ \"./src/blogs/how-do-grid-cells-work/oneGridCell.js\"),\n    oneGridCellModule: __webpack_require__(/*! ./oneGridCellModule */ \"./src/blogs/how-do-grid-cells-work/oneGridCellModule.js\"),\n    manyGridCellModules: __webpack_require__(/*! ./manyGridCellModules */ \"./src/blogs/how-do-grid-cells-work/manyGridCellModules.js\"),\n    gcmAsSdr: __webpack_require__(/*! ./gcmAsSdr */ \"./src/blogs/how-do-grid-cells-work/gcmAsSdr.js\"),\n    JSDS: __webpack_require__(/*! JSDS */ \"./node_modules/javascript-data-store/src/jsds.js\")\n\n    // Kicks things off.\n};window.onload = () => {\n    embed();\n};\n\n//# sourceURL=webpack:///./src/blogs/how-do-grid-cells-work/index.js?");

/***/ }),

/***/ "./src/blogs/how-do-grid-cells-work/manyGridCellModules.js":
/*!*****************************************************************!*\
  !*** ./src/blogs/how-do-grid-cells-work/manyGridCellModules.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("let utils = __webpack_require__(/*! ../../widgets/utils */ \"./src/widgets/utils.js\");\nlet html = __webpack_require__(/*! ./manyGridCellModules.tmpl.html */ \"./src/blogs/how-do-grid-cells-work/manyGridCellModules.tmpl.html\");\nlet HexagonGridCellModule = __webpack_require__(/*! HexagonGridCellModule */ \"./src/gridCells/hex-gcm.js\");\nlet JSDS = __webpack_require__(/*! JSDS */ \"./node_modules/javascript-data-store/src/jsds.js\");\n\nlet jsds = JSDS.create('manyGridCellModules');\n\nlet startingParams = {\n    anchor: { x: 0, y: 0 }\n};\n\nlet walkDistance = 10000;\nlet walkSpeed = 2.0;\nlet walkFunction;\nlet wasWalking = false;\njsds.set('walks', wasWalking);\nlet mouseover = false;\nlet frameRef = -1;\n\nlet colors = {\n    fields: {\n        on: {\n            fill: 'CORNFLOWERBLUE'\n        },\n        dim: {\n            fill: '#CBF1F1'\n        },\n        stroke: 'none',\n        fill: 'none'\n    }\n};\n\nlet gridCellModules;\nlet gridRows = 4,\n    gridCols = 4;\n\nfunction buildGridCellModules(gcmCount) {\n    let out = [];\n    while (out.length < gcmCount) {\n        let orientation = parseInt(utils.getRandomArbitrary(0, 60));\n        let scale = parseInt(utils.getRandomArbitrary(10, 50));\n        let module = new HexagonGridCellModule(0, gridRows, gridCols, orientation, scale);\n        module.setColor(Math.round(utils.getRandomArbitrary(100, 255)), Math.round(utils.getRandomArbitrary(100, 255)), Math.round(utils.getRandomArbitrary(100, 255)));\n        module.activeCells = 1;\n        out.push(module);\n    }\n    return out;\n}\n\nlet moduleOut = (elId, gcmCount = 16) => {\n    utils.loadHtml(html.default, elId, () => {\n\n        let $walksCheckbox = $('#' + elId + ' input.walks');\n\n        let width = 443;\n        let height = 250;\n        let t = 0;\n        let [X, V] = utils.randomTorusWalk(walkDistance, width, height, walkSpeed);\n        walkFunction = X;\n\n        // I'm just stashing there here because it is convenient, not because it\n        // is the right thing to do.\n        startingParams.gcmCount = gcmCount;\n\n        gridCellModules = buildGridCellModules(gcmCount);\n\n        let $svg = d3.select('#' + elId + ' svg.main').attr('width', width).attr('height', height);\n        let $world = $svg.select('g.world');\n\n        let $el = $('#' + elId);\n        let $orientationSlider = $el.find('input.orientation'),\n            $scaleSlider = $el.find('input.scale'),\n            $gcmCountSlider = $el.find('input.gcmCount'),\n            $gcmCountDisplay = $('span.gcmCount'),\n            $cellCountDisplay = $('span.cellCount');\n\n        function treatFields(fields, gcmIndex, params) {\n            fields.attr('class', 'field').attr('cx', d => d.x).attr('cy', d => d.y).attr('r', params.scale / 4).attr('stroke', colors.fields.stroke).attr('fill', d => {\n                let fill = colors.fields.fill;\n                let gridCellIndex = d.gridCell.id;\n                if (d.gridCell.active) fill = gridCellModules[gcmIndex].getColorString();\n                return fill;\n            });\n        }\n\n        function updateFields($group, points, gcmIndex, params) {\n            // Update\n            let $fields = $group.selectAll('circle.field').data(points);\n            treatFields($fields, gcmIndex, params);\n\n            // Enter\n            let $newFields = $fields.enter().append('circle');\n            treatFields($newFields, gcmIndex, params);\n\n            // Exit\n            $fields.exit().remove();\n        }\n\n        function updateLocation($group, location) {\n            let w = 12;\n            $group.select('rect.location').attr('x', location.x - w / 2).attr('y', location.y - w / 2).attr('width', w).attr('height', w).attr('rx', w / 4).attr('ry', w / 4).attr('fill', 'white').attr('stroke', 'black').attr('stroke-width', '3px');\n        }\n\n        function updateWorld($world, location, params) {\n            let data = d3.range(0, params.gcmCount);\n\n            function treatGroups(groups) {\n                groups.attr('class', (d, i) => {\n                    return 'gcm gcm-' + i;\n                });\n            }\n\n            // Update\n            let $gcmWorldGroups = $world.selectAll('g.gcm').data(data);\n            treatGroups($gcmWorldGroups);\n\n            // Enter\n            let $newGroups = $gcmWorldGroups.enter().append('g');\n            treatGroups($newGroups);\n\n            // Exit\n            $gcmWorldGroups.exit().remove();\n\n            $gcmWorldGroups.each((value, index) => {\n                let $group = $svg.select('.gcm-' + index);\n                let module = gridCellModules[index];\n                let origin = { x: 0, y: 0 };\n                let worldPoints = module.createWorldPoints(origin, width, height);\n                if (location.type === 'world') module.intersectWorld(location.x, location.y, worldPoints);\n                let myParams = Object.assign({\n                    scale: module.scale\n                }, params);\n                updateFields($group, worldPoints, index, myParams);\n            });\n        }\n\n        function updateDisplay() {\n            let params = jsds.get('params');\n            let location = jsds.get('location');\n            // Bail out if params or location haven't been loaded yet.\n            if (!params || !location) return;\n\n            let $world = $svg.selectAll('g.world').data([null]);\n            let $overlay = $svg.selectAll('g.overlay').data([null]);\n            $world.enter().append('g').attr('class', 'world');\n            $overlay.enter().append('g').attr('class', 'overlay');\n\n            updateWorld($world, location, params);\n            // updateOverlay($overlay, location, params)\n\n            updateLocation($svg, location);\n            // update display sliders\n            $orientationSlider.val(params.orientation);\n            $scaleSlider.val(params.scale);\n            $gcmCountSlider.val(params.gcmCount);\n            $gcmCountDisplay.html(params.gcmCount);\n            $cellCountDisplay.html(params.gcmCount * gridRows * gridCols);\n        }\n\n        function updateParams() {\n            gridCellModules = buildGridCellModules(jsds.get('params').gcmCount);\n            updateDisplay();\n        }\n\n        // Random walk animation controls\n        function start() {\n            if (!mouseover) {\n                frameRef = window.requestAnimationFrame(step);\n            }\n        }\n\n        function stop() {\n            window.cancelAnimationFrame(frameRef);\n        }\n\n        function step() {\n            if (isNaN(t) || t === undefined) {\n                t = 0;\n            }\n            let x = X[t % walkDistance][0];\n            let y = X[t % walkDistance][1];\n            jsds.set('location', {\n                type: 'world',\n                x: x, y: y\n            });\n            t++;\n            if (jsds.get('walks')) {\n                start();\n            }\n        }\n\n        // Animation events\n        $walksCheckbox.change(evt => {\n            let walks = document.getElementById(evt.target.id).checked;\n            jsds.set('walks', walks);\n        });\n\n        let interactEnter = () => {\n            d3.event.preventDefault();\n            mouseover = true;\n            if (jsds.get('walks')) stop();\n        };\n        let interactMove = () => {\n            d3.event.preventDefault();\n            let worldMouse = d3.mouse($world.node());\n            let location = {\n                type: 'world',\n                x: worldMouse[0],\n                y: worldMouse[1]\n            };\n            jsds.set('location', location);\n        };\n        let interactLeave = () => {\n            d3.event.preventDefault();\n            mouseover = false;\n            if (jsds.get('walks')) start();\n        };\n\n        $svg.on('mouseenter', interactEnter);\n        $svg.on('mousemove', interactMove);\n        $svg.on('mouseleave', interactLeave);\n        $svg.on('touchstart', interactEnter);\n        $svg.on('touchmove', interactMove);\n        $svg.on('touchend', interactLeave);\n\n        // Start here\n\n        // User slider events\n        $gcmCountSlider.on('input', () => {\n            let params = jsds.get('params');\n            params.gcmCount = parseInt($gcmCountSlider.val());\n            jsds.set('params', params);\n        });\n\n        jsds.before('set', 'walks', () => {\n            // stash previous value\n            wasWalking = jsds.get('walks');\n        });\n        jsds.after('set', 'walks', walks => {\n            $walksCheckbox.prop('checked', walks);\n            if (walks && !wasWalking) {\n                start();\n            } else if (!walks && wasWalking) {\n                stop();\n            }\n        });\n        jsds.after('set', 'hide-marker', hide => {\n            let visible = 'visible';\n            if (hide) visible = 'hidden';\n            $svg.select('rect.location').attr('visibility', visible);\n        });\n\n        // Update when values change.\n        jsds.after('set', 'params', updateParams);\n        jsds.after('set', 'location', updateDisplay);\n\n        jsds.set('params', startingParams);\n\n        start();\n    });\n};\n\nmodule.exports = moduleOut;\n\n//# sourceURL=webpack:///./src/blogs/how-do-grid-cells-work/manyGridCellModules.js?");

/***/ }),

/***/ "./src/blogs/how-do-grid-cells-work/manyGridCellModules.tmpl.html":
/*!************************************************************************!*\
  !*** ./src/blogs/how-do-grid-cells-work/manyGridCellModules.tmpl.html ***!
  \************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony default export */ __webpack_exports__[\"default\"] = (`<svg class=\"main\" style=\"border:solid black 2px\">\n    <g class=\"world\"></g>\n    <rect class=\"location\"></rect>\n    <svg class=\"overlay\">\n        <rect></rect>\n    </svg>\n</svg>\n<br>\n<input id=\"walks4\" class=\"walks\" type=\"checkbox\"><label for=\"walks4\">Random Walk</label>\n<input type=\"range\" min=\"1\" max=\"32\" value=\"5\" step=\"1\" class=\"gcmCount\">\n<span class=\"gcmCount\">?</span> Grid Cell Modules\n<br>\n`);\n\n//# sourceURL=webpack:///./src/blogs/how-do-grid-cells-work/manyGridCellModules.tmpl.html?");

/***/ }),

/***/ "./src/blogs/how-do-grid-cells-work/oneGridCell.js":
/*!*********************************************************!*\
  !*** ./src/blogs/how-do-grid-cells-work/oneGridCell.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("let utils = __webpack_require__(/*! ../../widgets/utils */ \"./src/widgets/utils.js\");\nlet html = __webpack_require__(/*! ./oneGridCell.tmpl.html */ \"./src/blogs/how-do-grid-cells-work/oneGridCell.tmpl.html\");\nlet HexagonGridCellModule = __webpack_require__(/*! HexagonGridCellModule */ \"./src/gridCells/hex-gcm.js\");\nlet JSDS = __webpack_require__(/*! JSDS */ \"./node_modules/javascript-data-store/src/jsds.js\");\n\nlet jsds = JSDS.create('oneGridCell');\n\nlet startingParams = {\n    anchor: { x: 0, y: 0 },\n    scale: 20,\n    orientation: 15.0\n};\n\nlet walkDistance = 10000;\nlet walkSpeed = 2.0;\nlet walkFunction;\nlet wasWalking = false;\njsds.set('walks', wasWalking);\nlet mouseover = false;\nlet frameRef = -1;\n\nlet colors = {\n    fields: {\n        on: {\n            fill: 'CORNFLOWERBLUE'\n        },\n        dim: {\n            fill: '#CBF1F1'\n        },\n        stroke: 'LIGHTSTEELBLUE',\n        fill: 'none'\n    }\n};\n\nlet moduleOut = elId => {\n    utils.loadHtml(html.default, elId, () => {\n\n        let $walksCheckbox = $('#' + elId + ' input.walks');\n\n        let width = 450;\n        let height = 250;\n\n        let t = 0;\n        let [X, V] = utils.randomTorusWalk(walkDistance, width, height, walkSpeed);\n        walkFunction = X;\n\n        let $svg = d3.select('#' + elId + ' svg').attr('width', width).attr('height', height);\n\n        let $el = $('#' + elId);\n        let $orientationSlider = $el.find('input.orientation'),\n            $scaleSlider = $el.find('input.scale');\n\n        function treatFields(fields, color, params) {\n            fields.attr('class', 'field').attr('cx', d => d.x).attr('cy', d => d.y).attr('r', params.scale / 2).attr('stroke', colors.fields.stroke).attr('fill', d => {\n                let fill = colors.fields.fill;\n                if (d.gridCell.id === 0) {\n                    fill = colors.fields.dim.fill;\n                    if (d.gridCell.active) fill = colors.fields.on.fill;\n                }\n                return fill;\n            });\n        }\n\n        function updateFields($world, points, module, params) {\n            // Update\n            let $fields = $world.selectAll('circle.field').data(points);\n            treatFields($fields, module.getColorString(), params);\n\n            // Enter\n            let $newFields = $fields.enter().append('circle');\n            treatFields($newFields, module.getColorString(), params);\n\n            // Exit\n            $fields.exit().remove();\n        }\n\n        function updateLocation($group, location, params) {\n            let w = params.scale / 3;\n            $group.select('rect.location').attr('x', location.x - w / 2).attr('y', location.y - w / 2).attr('width', w).attr('height', w).attr('rx', w / 4).attr('ry', w / 4).attr('fill', 'LIGHTCORAL').attr('stroke', 'INDIANRED').attr('stroke-width', '2px');\n        }\n\n        function updateDisplay() {\n            let params = jsds.get('params');\n            let location = jsds.get('location');\n            // Bail out if params or location haven't been loaded yet.\n            if (!params || !location) return;\n\n            let $world = $svg.select('g.world');\n\n            let module = new HexagonGridCellModule(0, 4, 4, params.orientation, params.scale);\n            module.setColor(100, 100, 255);\n            module.activeCells = 1;\n\n            let origin = { x: 0, y: 0 };\n            let points = module.createWorldPoints(origin, width, height);\n            module.intersectWorld(location.x, location.y, points);\n\n            updateFields($world, points, module, params);\n            updateLocation($svg, location, params);\n\n            // update display sliders\n            $orientationSlider.val(params.orientation);\n            $scaleSlider.val(params.scale);\n        }\n\n        // Random walk animation controls\n        function start() {\n            if (!mouseover) {\n                frameRef = window.requestAnimationFrame(step);\n            }\n        }\n\n        function stop() {\n            window.cancelAnimationFrame(frameRef);\n        }\n\n        function step() {\n            if (isNaN(t) || t === undefined) {\n                t = 0;\n            }\n            let x = X[t % walkDistance][0];\n            let y = X[t % walkDistance][1];\n            jsds.set('location', {\n                type: 'world',\n                x: x, y: y\n            });\n            t++;\n            if (jsds.get('walks')) {\n                start();\n            }\n        }\n\n        // Animation events\n        $walksCheckbox.change(evt => {\n            let walks = document.getElementById(evt.target.id).checked;\n            jsds.set('walks', walks);\n        });\n\n        let interactEnter = () => {\n            d3.event.preventDefault();\n            mouseover = true;\n            if (jsds.get('walks')) stop();\n        };\n        let interactMove = () => {\n            d3.event.preventDefault();\n            let mouse = d3.mouse($svg.node());\n            jsds.set('location', { x: mouse[0], y: mouse[1] });\n        };\n        let interactLeave = () => {\n            d3.event.preventDefault();\n            mouseover = false;\n            if (jsds.get('walks')) start();\n        };\n\n        $svg.on('mouseenter', interactEnter);\n        $svg.on('mousemove', interactMove);\n        $svg.on('mouseleave', interactLeave);\n        $svg.on('touchstart', interactEnter);\n        $svg.on('touchmove', interactMove);\n        $svg.on('touchend', interactLeave);\n\n        jsds.before('set', 'walks', () => {\n            // stash previous value\n            wasWalking = jsds.get('walks');\n        });\n        jsds.after('set', 'walks', walks => {\n            $walksCheckbox.prop('checked', walks);\n            if (walks && !wasWalking) {\n                start();\n            } else if (!walks && wasWalking) {\n                stop();\n            }\n        });\n\n        // This is the input from the user. Values change and the display updates.\n        $('#' + elId + ' input').on('input', () => {\n            let params = jsds.get('params');\n            params.orientation = parseInt($orientationSlider.val());\n            params.scale = parseInt($scaleSlider.val());\n            jsds.set('params', params);\n        });\n\n        jsds.after('set', 'params', updateDisplay);\n        jsds.after('set', 'location', updateDisplay);\n\n        // The listeners will render.\n        jsds.set('params', startingParams);\n        jsds.set('location', { x: width / 2, y: height / 2, type: 'world' });\n    });\n};\n\nmodule.exports = moduleOut;\n\n//# sourceURL=webpack:///./src/blogs/how-do-grid-cells-work/oneGridCell.js?");

/***/ }),

/***/ "./src/blogs/how-do-grid-cells-work/oneGridCell.tmpl.html":
/*!****************************************************************!*\
  !*** ./src/blogs/how-do-grid-cells-work/oneGridCell.tmpl.html ***!
  \****************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony default export */ __webpack_exports__[\"default\"] = (`<svg style=\"border:solid black 1px\">\n    <g class=\"world\"></g>\n    <rect class=\"location\"></rect>\n</svg>\n<input type=\"range\" min=\"0\" max=\"60\" value=\"15\" step=\"1\" class=\"orientation\">orientation<br>\n<input type=\"range\" min=\"10\" max=\"100\" value=\"0\" step=\"1\" class=\"scale\">scale<br>\n<input id=\"walks2\" class=\"walks\" type=\"checkbox\"><label for=\"walks2\">Random Walk</label>\n`);\n\n//# sourceURL=webpack:///./src/blogs/how-do-grid-cells-work/oneGridCell.tmpl.html?");

/***/ }),

/***/ "./src/blogs/how-do-grid-cells-work/oneGridCellModule.js":
/*!***************************************************************!*\
  !*** ./src/blogs/how-do-grid-cells-work/oneGridCellModule.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("let utils = __webpack_require__(/*! ../../widgets/utils */ \"./src/widgets/utils.js\");\nlet html = __webpack_require__(/*! ./oneGridCellModule.tmpl.html */ \"./src/blogs/how-do-grid-cells-work/oneGridCellModule.tmpl.html\");\nlet HexagonGridCellModule = __webpack_require__(/*! HexagonGridCellModule */ \"./src/gridCells/hex-gcm.js\");\nlet JSDS = __webpack_require__(/*! JSDS */ \"./node_modules/javascript-data-store/src/jsds.js\");\n\nlet jsds = JSDS.create('oneGridCellModule');\n\nlet startingParams = {\n    anchor: { x: 0, y: 0 },\n    scale: 20,\n    orientation: 15.0\n};\n\nlet walkDistance = 10000;\nlet walkSpeed = 2.0;\nlet walkFunction;\nlet wasWalking = false;\njsds.set('walks', wasWalking);\nlet mouseover = false;\nlet frameRef = -1;\n\nlet colors = {\n    fields: {\n        on: {\n            fill: 'CORNFLOWERBLUE'\n        },\n        dim: {\n            fill: '#CBF1F1'\n        },\n        stroke: 'LIGHTSTEELBLUE',\n        fill: 'none'\n    }\n};\n\nlet moduleOut = elId => {\n    utils.loadHtml(html.default, elId, () => {\n\n        let $walksCheckbox = $('#' + elId + ' input.walks');\n\n        let width = 443;\n        let height = 250;\n\n        let t = 0;\n        let [X, V] = utils.randomTorusWalk(walkDistance, width, height, walkSpeed);\n        walkFunction = X;\n\n        let overlaySize = 140;\n\n        let $svg = d3.select('#' + elId + ' svg.main').attr('width', width).attr('height', height);\n        let $world = $svg.select('g.world');\n        let $overlay = $svg.select('svg.overlay');\n\n        let $el = $('#' + elId);\n        let $orientationSlider = $el.find('input.orientation'),\n            $scaleSlider = $el.find('input.scale');\n\n        function setUpOverlay() {\n            let overlayPadding = 10,\n                overlayX = overlayPadding,\n                overlayY = height - overlayPadding - overlaySize;\n\n            $overlay.attr('x', overlayX).attr('y', overlayY).attr('width', overlaySize).attr('height', overlaySize);\n            $overlay.select('rect').attr('stroke', 'black').attr('stroke-width', '2px').attr('fill', 'white').attr('width', overlaySize).attr('height', overlaySize);\n        }\n\n        function treatFields(fields, params) {\n            fields.attr('class', 'field').attr('cx', d => d.x).attr('cy', d => d.y).attr('r', params.scale / 2).attr('stroke', colors.fields.stroke).attr('fill', d => {\n                let fill = colors.fields.fill;\n                if (d.gridCell.active) fill = colors.fields.on.fill;\n                return fill;\n            });\n        }\n\n        function updateFields($group, points, module, params) {\n            // Update\n            let $fields = $group.selectAll('circle.field').data(points);\n            treatFields($fields, params);\n\n            // Enter\n            let $newFields = $fields.enter().append('circle');\n            treatFields($newFields, params);\n\n            // Exit\n            $fields.exit().remove();\n        }\n\n        function updateLocation($group, location, params) {\n            let w = params.scale / 3;\n            $group.select('rect.location').attr('x', location.x - w / 2).attr('y', location.y - w / 2).attr('width', w).attr('height', w).attr('rx', w / 4).attr('ry', w / 4).attr('fill', 'LIGHTCORAL').attr('stroke', 'INDIANRED');\n        }\n\n        function updateDisplay() {\n            let params = jsds.get('params');\n            let location = jsds.get('location');\n            // Bail out if params or location haven't been loaded yet.\n            if (!params || !location) return;\n\n            let module = new HexagonGridCellModule(0, 4, 4, params.orientation, params.scale);\n            module.setColor(100, 100, 255);\n            module.activeCells = 1;\n\n            let origin = { x: 0, y: 0 };\n\n            let worldPoints = module.createWorldPoints(origin, width, height);\n            origin.y = 80;\n            let overlayPoints = module.createOverlayPoints(origin);\n            if (location.type === 'world') {\n                module.intersectWorld(location.x, location.y, worldPoints);\n            } else if (location.type === 'overlay') {\n                module.intersectOverlay(location.x, location.y, overlayPoints);\n            } else throw new Error(\"Unknown location type\");\n\n            updateFields($world, worldPoints, module, params);\n            updateFields($overlay, overlayPoints, module, params);\n            if (location.type === 'world') updateLocation($svg, location, params);\n\n            // update display sliders\n            $orientationSlider.val(params.orientation);\n            $scaleSlider.val(params.scale);\n        }\n\n        // Random walk animation controls\n        function start() {\n            if (!mouseover) {\n                frameRef = window.requestAnimationFrame(step);\n            }\n        }\n\n        function stop() {\n            window.cancelAnimationFrame(frameRef);\n        }\n\n        function step() {\n            if (isNaN(t) || t === undefined) {\n                t = 0;\n            }\n            let x = X[t % walkDistance][0];\n            let y = X[t % walkDistance][1];\n            jsds.set('location', {\n                type: 'world',\n                x: x, y: y\n            });\n            t++;\n            if (jsds.get('walks')) {\n                start();\n            }\n        }\n\n        // Animation events\n        $walksCheckbox.change(evt => {\n            let walks = document.getElementById(evt.target.id).checked;\n            jsds.set('walks', walks);\n        });\n\n        let interactEnter = () => {\n            d3.event.preventDefault();\n            mouseover = true;\n            if (jsds.get('walks')) stop();\n        };\n        let interactMove = () => {\n            d3.event.preventDefault();\n            let worldMouse = d3.mouse($world.node()),\n                overlayMouse = d3.mouse($overlay.node());\n            ox = overlayMouse[0], oy = overlayMouse[1];\n            let location = {\n                type: 'world',\n                x: worldMouse[0],\n                y: worldMouse[1]\n            };\n            if (0 < ox && ox < overlaySize && 0 < oy && oy < overlaySize) {\n                location.type = 'overlay';\n                location.x = overlayMouse[0];\n                location.y = overlayMouse[1];\n            }\n            jsds.set('location', location);\n        };\n        let interactLeave = () => {\n            d3.event.preventDefault();\n            mouseover = false;\n            if (jsds.get('walks')) start();\n        };\n\n        $svg.on('mouseenter', interactEnter);\n        $svg.on('mousemove', interactMove);\n        $svg.on('mouseleave', interactLeave);\n        $svg.on('touchstart', interactEnter);\n        $svg.on('touchmove', interactMove);\n        $svg.on('touchend', interactLeave);\n\n        // Start here\n        setUpOverlay();\n\n        // This is the input from the user. Values change and the display updates.\n        $('#' + elId + ' input').on('input', () => {\n            let params = jsds.get('params');\n            params.orientation = parseInt($orientationSlider.val());\n            params.scale = parseInt($scaleSlider.val());\n            jsds.set('params', params);\n        });\n\n        jsds.before('set', 'walks', () => {\n            // stash previous value\n            wasWalking = jsds.get('walks');\n        });\n        jsds.after('set', 'walks', walks => {\n            $walksCheckbox.prop('checked', walks);\n            if (walks && !wasWalking) {\n                start();\n            } else if (!walks && wasWalking) {\n                stop();\n            }\n        });\n\n        // Update when values change.\n        jsds.after('set', 'params', updateDisplay);\n        jsds.after('set', 'location', updateDisplay);\n\n        jsds.set('params', startingParams);\n\n        start();\n    });\n};\n\nmodule.exports = moduleOut;\n\n//# sourceURL=webpack:///./src/blogs/how-do-grid-cells-work/oneGridCellModule.js?");

/***/ }),

/***/ "./src/blogs/how-do-grid-cells-work/oneGridCellModule.tmpl.html":
/*!**********************************************************************!*\
  !*** ./src/blogs/how-do-grid-cells-work/oneGridCellModule.tmpl.html ***!
  \**********************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony default export */ __webpack_exports__[\"default\"] = (`<svg class=\"main\" style=\"border:solid black 2px\">\n    <g class=\"world\"></g>\n    <rect class=\"location\"></rect>\n    <svg class=\"overlay\">\n        <rect></rect>\n    </svg>\n</svg>\n<input type=\"range\" min=\"0\" max=\"60\" value=\"15\" step=\"1\" class=\"orientation\">orientation<br>\n<input type=\"range\" min=\"10\" max=\"100\" value=\"0\" step=\"1\" class=\"scale\">scale<br>\n<input id=\"walks3\" class=\"walks\" type=\"checkbox\"><label for=\"walks3\">Random Walk</label>\n`);\n\n//# sourceURL=webpack:///./src/blogs/how-do-grid-cells-work/oneGridCellModule.tmpl.html?");

/***/ }),

/***/ "./src/gridCells/grid-cell-module.js":
/*!*******************************************!*\
  !*** ./src/gridCells/grid-cell-module.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("let uniqueArray = arrArg => arrArg.filter((elem, pos, arr) => arr.indexOf(elem) == pos);\n\nclass GridCell {\n    constructor(id, x, y) {\n        this.id = id;\n        this.x = x;\n        this.y = y;\n        this.active = false;\n    }\n\n    activate() {\n        this.active = true;\n    }\n\n    deactivate() {\n        this.active = false;\n    }\n\n    isActive() {\n        return this.active;\n    }\n}\n\nclass GridCellModule {\n\n    constructor(id, orientation) {\n        this.id = id;\n        this.setColor(100, 100, 255);\n        this.orientation = orientation || 0;\n        this.visible = true;\n        this.activeCells = 1;\n        this.weight = 1;\n    }\n\n    static translatePoint(pointX, pointY, originX, originY, degrees) {\n        let angle = degrees * (Math.PI / 180);\n        return {\n            x: Math.cos(angle) * (pointX - originX) - Math.sin(angle) * (pointY - originY) + originX,\n            y: Math.sin(angle) * (pointX - originX) + Math.cos(angle) * (pointY - originY) + originY\n        };\n    }\n\n    static getRandomInt(minin, maxin) {\n        let min = Math.ceil(minin);\n        let max = Math.floor(maxin);\n        return Math.floor(Math.random() * (max - min)) + min;\n    }\n\n    createOverlayPoints() {\n        throw new Error('GridCellModule implementations must provide createOverlayPoints()');\n    }\n\n    createWorldPoints(origin, w, h, orientation) {\n        throw new Error('GridCellModule implementations must provide createWorldPoints()');\n    }\n\n    createGridCells() {\n        throw new Error('GridCellModule implementations must provide createGridCells()');\n    }\n\n    getEncoding() {\n        throw new Error('GridCellModule implementations must provide getEncoding()');\n    }\n\n    setColor(r, g, b) {\n        this.r = r;\n        this.g = g;\n        this.b = b;\n    }\n\n    getColorString() {\n        return 'rgb(' + this.r + ', ' + this.g + ', ' + this.b + ')';\n    }\n\n    /** ACTIVATES GRID CELLS **/\n    intersectWorld(x, y, points) {\n        // We want to take the mouse position on the world and do two things:\n        // 1. mark the closest point(s) in each GCM world where the cursor is\n        //    intersecting the world\n        // 2. activate grid cells in each GCM globally that correspond to these\n        //    points\n        let closestPoints = this.getClosestPointsByDistance(x, y, points, this.activeCells);\n        this.clearActiveGridCells();\n        closestPoints.forEach(function (p) {\n            p.gridCell.activate();\n        });\n    }\n\n    /** ACTIVATES GRID CELLS **/\n    intersectOverlay(x, y, points) {\n        // We want to take the mouse position over the GCM overlay and do\n        // these things:\n        // 1. turn off all grid cells across all modules\n        this.clearActiveGridCells();\n        // 2. turn on grid cells within this module corresponding to x,y\n        let gridCells = this.getGridCellsByDistance(x, y, points, this.activeCells);\n        gridCells.forEach(function (cell) {\n            cell.activate();\n        });\n    }\n\n    getClosestPointsByDistance(x, y, points, count) {\n        let mappedDistances = points.map(function (p, i) {\n            return { index: i, distance: Math.hypot(p.x - x, p.y - y) };\n        });\n        mappedDistances.sort(function (a, b) {\n            if (a.distance > b.distance) return 1;\n            if (a.distance < b.distance) return -1;\n            return 0;\n        });\n        let unique = uniqueArray(mappedDistances).slice(0, count);\n        return unique.map(function (point) {\n            return points[point.index];\n        });\n    }\n\n    getPointsByDistance(x, y, points) {\n        let mappedDistances = points.map(function (p, i) {\n            return { index: i, distance: Math.hypot(p.x - x, p.y - y) };\n        });\n        mappedDistances.sort(function (a, b) {\n            if (a.distance > b.distance) return 1;\n            if (a.distance < b.distance) return -1;\n            return 0;\n        });\n        return uniqueArray(mappedDistances);\n    }\n\n    getGridCellsByDistance(x, y, points, count) {\n        let pointsByDistance = this.getPointsByDistance(x, y, points);\n        let noPadding = pointsByDistance.filter(function (point) {\n            let p = points[point.index];\n            return p.gridCell && !p.gridCell.isPadding;\n        });\n        return noPadding.map(function (mappedDistance) {\n            return points[mappedDistance.index].gridCell;\n        }).slice(0, count);\n    }\n\n    clearActiveGridCells() {\n        this.gridCells.forEach(function (cell) {\n            cell.deactivate();\n        });\n    }\n\n}\n\nmodule.exports = {\n    GridCell: GridCell,\n    GridCellModule: GridCellModule\n};\n\n//# sourceURL=webpack:///./src/gridCells/grid-cell-module.js?");

/***/ }),

/***/ "./src/gridCells/hex-gcm.js":
/*!**********************************!*\
  !*** ./src/gridCells/hex-gcm.js ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("let GridCell = __webpack_require__(/*! ./grid-cell-module */ \"./src/gridCells/grid-cell-module.js\").GridCell;\nlet GridCellModule = __webpack_require__(/*! ./grid-cell-module */ \"./src/gridCells/grid-cell-module.js\").GridCellModule;\n\nfunction fillByHover(data, config) {\n    if (config.highlightGridCell !== undefined) {\n        if (config.highlightGridCell === data.gridCell.id && data.hover) return data.rgb;\n    } else {\n        if (data.hover) return data.rgb;\n    }\n    return 'none';\n}\n\nfunction fillWithFields(data, config) {\n    let point = data;\n    if (config.highlightGridCell !== undefined) {\n        if (config.highlightGridCell === data.gridCell.id) {\n            if (!point.gridCell.isPadding && point.gridCell.isActive()) {\n                return data.rgb;\n            }\n        }\n        return 'none';\n    }\n    if (!point.gridCell.isPadding && point.gridCell.isActive()) {\n        return data.rgb;\n    }\n    return 'none';\n}\n\nclass HexagonGridCellModule extends GridCellModule {\n\n    constructor(id, xDim, yDim, orientation, scale) {\n        super(id, orientation);\n        this.xDim = xDim;\n        this.yDim = yDim;\n        this.scale = scale;\n        this.gridCells = this.createGridCells();\n    }\n\n    createGridCells() {\n        let cells = [];\n        for (let x = 0; x < this.xDim; x++) {\n            for (let y = 0; y < this.yDim; y++) {\n                cells.push(new GridCell(cells.length, x, y));\n            }\n        }\n        return cells;\n    }\n\n    getEncoding() {\n        let justGridCells = this.gridCells.filter(gc => !gc.isPadding);\n        let out = [];\n        let weight = this.weight;\n        justGridCells.forEach(gc => {\n            let bit = gc.isActive() ? 1 : 0;\n            for (let x = 0; x < weight; x++) {\n                out.push(bit);\n            }\n        });\n        return out;\n    }\n\n    treatPoint(circles, texts, config) {\n        circles.attr(\"class\", \"cell\").attr('cx', function (data) {\n            return data.x;\n        }).attr('cy', function (data) {\n            return data.y;\n        }).attr('r', this.scale / 2).attr('stroke', '#bbb').attr('stroke-width', function (data) {\n            let out = config.stroke;\n            if (config.lite) out = 0;\n            if (data.gridCell.isPadding) out = 0;\n            return out;\n        }).attr('fill', data => {\n            if (config.showFields) return fillWithFields(data, config);else return fillByHover(data, config);\n        }).attr('fill-opacity', config.fillOpacity || 0.75);\n\n        texts.attr('x', function (d) {\n            return d.x - 3;\n        }).attr('y', function (d) {\n            return d.y + 3;\n        }).attr('font-size', config.textSize).attr('fill', 'white').text(function (d) {\n            let gc = d.gridCell;\n            if (!gc.isPadding && gc.isActive()) return d.gridCell.id;\n        });\n    }\n\n    getShape() {\n        return 'circle';\n    }\n\n    _getGridCellAt(x, y) {\n        for (let i = 0; i < this.gridCells.length; i++) {\n            let cell = this.gridCells[i];\n            if (cell.x == x && cell.y == y) return cell;\n        }\n        debugger;\n    }\n\n    _parallelogramitize(x, y) {\n        // Shift every other row to get a pseudo hex grid\n        let xmod = x;\n        let ymod = y;\n        xmod += y / 2;\n        // ymod = y - (this.scale - Math.sin(60 * (Math.PI / 180)));\n        ymod = y - y * 0.1;\n        return [xmod, ymod];\n    }\n\n    // We have to pad the grid cell X/Y output with 2 extra cells on all\n    // sides so the voronoi renders properly. These outer cells will be\n    // empty, no grid cells inside, so they can renderWorld differently.\n    _addPadding(cells, padRows) {\n        let out = cells.slice(0);\n        for (let x = -padRows; x < this.xDim + padRows; x++) {\n            for (let y = -padRows; y < this.yDim + padRows; y++) {\n                // Only add the padding cells\n                if (x < 0 || x >= this.xDim || y < 0 || y >= this.yDim) {\n                    // This is like a fake grid cell.\n                    out.push({\n                        x: x,\n                        y: y,\n                        alpha: 0.0,\n                        isPadding: true\n                    });\n                }\n            }\n        }\n        return out;\n    }\n\n    createOverlayPoints(origin) {\n        let me = this;\n        let scale = this.scale;\n        let padRows = 0;\n        let paddedCells = this._addPadding(this.gridCells, padRows);\n\n        let out = paddedCells.map(function (gc, i) {\n            let x = gc.x * scale;\n            let y = gc.y * scale;\n            let [xmod, ymod] = me._parallelogramitize(x, y);\n            let rotatedPoint = GridCellModule.translatePoint(xmod, ymod, origin.x, origin.y, me.orientation + 30);\n            // adjust for better rotation on screen\n            let xMoved = rotatedPoint.x;\n            let yMoved = rotatedPoint.y;\n            return {\n                id: i,\n                x: xMoved,\n                y: yMoved,\n                gridCell: gc,\n                alpha: 0.1\n            };\n        });\n        return out;\n    }\n\n    createWorldPoints(origin, w, h) {\n        // Start rendering points at the origin by rendering grid cell modules\n        // over the entire space, leaving enough room for rotation.\n        let startAt = { x: origin.x - w, y: origin.y - 2 * h },\n            endAt = { x: origin.x + 2 * w, y: origin.y + 2 * h };\n        let x = startAt.x,\n            y = startAt.y;\n        let gridx = 0,\n            gridy = 0;\n        let pointId = 0;\n        let points = [];\n        while (y <= endAt.y) {\n            gridx = 0;\n            while (x <= endAt.x) {\n                //// Shift every other row to get a pseudo hex grid\n                let [xmod, ymod] = this._parallelogramitize(x, y);\n                // Rotate, using center as origin.\n                let rotatedPoint = GridCellModule.translatePoint(xmod, ymod, origin.x, origin.y, this.orientation + 30);\n                let point = {\n                    id: pointId++,\n                    x: rotatedPoint.x,\n                    y: rotatedPoint.y,\n                    gridCell: this._getGridCellAt(gridx, gridy),\n                    alpha: 0.1\n                    // Only save points that are currently on the screen, within a\n                    // buffer defined by the grid scale\n                };if (point.x >= origin.x - this.scale && point.x <= origin.x + w + this.scale && point.y >= origin.y - this.scale && point.y <= origin.y + h + this.scale) {\n                    points.push(point);\n                } else {\n                    if (point.x > 0 && point.x < w && point.y > 0 && point.y < h) console.log('skipped %s: %s, %s', point.id, point.x, point.y);\n                }\n                x += this.scale;\n                gridx++;\n                // This resets the grid cell module x dimension so it tiles.\n                if (gridx > this.xDim - 1) gridx = 0;\n            }\n            // Reset X to walk through the next row\n            x = 0;\n            y += this.scale;\n            gridy++;\n            // This resets the grid cell module y dimension so it tiles.\n            if (gridy > this.yDim - 1) gridy = 0;\n        }\n        return points;\n    }\n}\n\nmodule.exports = HexagonGridCellModule;\n\n//# sourceURL=webpack:///./src/gridCells/hex-gcm.js?");

/***/ }),

/***/ "./src/widgets/utils.js":
/*!******************************!*\
  !*** ./src/widgets/utils.js ***!
  \******************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("// Loads given html into an element, calls the cb one time when loaded.\nfunction loadHtml(html, elementId, cb) {\n    let $el = $('#' + elementId);\n    $el.html(html).promise().done(cb);\n}\n\nfunction getRandomInt(max) {\n    return Math.floor(Math.random() * Math.floor(max));\n}\n\nfunction precisionRound(number, precision) {\n    let factor = Math.pow(10, precision);\n    return Math.round(number * factor) / factor;\n}\n\nfunction getRandomArbitrary(min, max) {\n    return Math.random() * (max - min) + min;\n}\n\nlet mod = function (a, b) {\n    return (a % b + b) % b;\n};\n\n// Standard Normal variate using Box-Muller transform.\nlet randomBoxMuller = function () {\n    let u = 0,\n        v = 0;\n    while (u === 0) u = Math.random(); //Converting [0,1) to (0,1)\n    while (v === 0) v = Math.random();\n    return Math.sqrt(-2.0 * Math.log(u)) * Math.cos(2.0 * Math.PI * v);\n};\n\nfunction randomTorusWalk(d, w, h, speed) {\n    let X = [];\n    let V = [];\n    let x = [0.5 * w, 0.5 * h];\n\n    X.push(x.slice());\n    let v = [0.0, 0.0];\n    let theta = 0.0;\n\n    for (let t = 0; t < d; t++) {\n        theta += randomBoxMuller() / 4;\n        v[0] = speed * Math.cos(theta);\n        v[1] = speed * Math.sin(theta);\n        x[0] += v[0];\n        x[1] += v[1];\n        x[0] = mod(x[0], w);\n        x[1] = mod(x[1], h);\n        X.push(x.slice());\n        V.push(v.slice());\n    }\n    return [X, V];\n}\n\nmodule.exports = {\n    loadHtml: loadHtml,\n    getRandomInt: getRandomInt,\n    getRandomArbitrary: getRandomArbitrary,\n    precisionRound: precisionRound,\n    randomTorusWalk: randomTorusWalk\n};\n\n//# sourceURL=webpack:///./src/widgets/utils.js?");

/***/ }),

/***/ 0:
/*!*********************************************************!*\
  !*** multi ./src/blogs/how-do-grid-cells-work/index.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("module.exports = __webpack_require__(/*! ./src/blogs/how-do-grid-cells-work/index.js */\"./src/blogs/how-do-grid-cells-work/index.js\");\n\n\n//# sourceURL=webpack:///multi_./src/blogs/how-do-grid-cells-work/index.js?");

/***/ })

/******/ });